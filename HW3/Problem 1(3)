import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

X = np.array([[1, 3], [2, 5], [3, 4], [4, 3], [5, 2], [5, 1]], dtype=float)
y = np.array([0, 0, 0, 0, 1, 1]).reshape(-1, 1)
X0 = X[np.where(y==0)[0], :]
X1 = X[np.where(y==1)[0], :]

##### Standardize data
miu = X.mean(axis=0).reshape(1, -1)
sigma = X.std(axis=0).reshape(1, -1)
X = (X-miu)/sigma

##### Filter data by class
X0 = X[np.where(y==0)[0], :]
X1 = X[np.where(y==1)[0], :]

##### Find centroid
miu0 = X0.mean(axis=0).reshape(1, -1)
miu1 = X1.mean(axis=0).reshape(1, -1)

##### Calculate Sw and w
X0_minus_miu0 =  X0 - miu0
X1_minus_miu1 =  X1 - miu1
Sw = sum(sum(X0_minus_miu0**2)) + sum(sum(X1_minus_miu1**2))
w = (1/Sw) * (miu0 - miu1).reshape(-1, 1)
##### Normalize w first since it's U_red in PCA, has to be norm 1
w = w/np.sqrt(w.T@w)
print("Eigenvector(s) (w) spanning projection space : \n", w)

##### Plot decision boundary/region first (otherwise it will cover others)
plot1 = plt.figure(1)
##### find slope of decision boundary
slope = w[1, 0] / w[0, 0]
slope_db = -(1/slope)
##### Decision boundary will pass mid point of projdected miu0 and projected miu1
Z_mid = (miu0 @ w + miu1 @ w)/2
Z_mid_rec = Z_mid @ w.T
intercept_db = Z_mid_rec[0, 1] - slope_db * Z_mid_rec[0, 0]

##### Use controu to plot colored decision region
x_min, x_max = X[:, 0].min() - 0.15, X[:, 0].max() + 0.35
y_min, y_max = X[:, 1].min() - 0.14, X[:, 1].max() + 0.16
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
def Height(x, y, slope, intercept):
    return intercept + slope*x - y
height = Height(xx.ravel(), yy.ravel(), slope_db, intercept_db)
height = height.reshape(xx.shape)
##### binary map of height
height[height<=0] = 0
height[height>0] = 1

##### Plot decision region
cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#0000FF'])
plot1 = plt.figure(1)
plt.pcolormesh(xx, yy, height, cmap=cmap_light)
plt.gca().set_aspect('equal', adjustable='box')
plt.grid()
plt.title("Standardized Data/Projection Line/Decision Boundary")

#### Plot standardized points
plt.scatter(X0[:, 0], X0[:, 1], marker = "o", color = '#FF0000', label = r"$class\quad 0$")
plt.scatter(X1[:, 0], X1[:, 1], marker = "s", color = '#0000FF', label = r"$class\quad 1$")

##### Plot projection line and porjected points
##### Find reduced coordinate
Z0 = X0 @ w
Z1 = X1 @ w
##### Recover the data with original dimensionality
X0_rec = Z0 @ w.T
X1_rec = Z1 @ w.T
##### Plot projection line
X_combine_rec = np.r_[X0_rec, X1_rec]
lower_point = X_combine_rec[np.where(X_combine_rec[:, 0]==np.amin(X_combine_rec[:, 0])), :].reshape(1, -1)
upper_point = X_combine_rec[np.where(X_combine_rec[:, 0]==np.amax(X_combine_rec[:, 0])), :].reshape(1, -1)
xlinemark = np.linspace(lower_point[0, 0], upper_point[0, 0], 10)
slope = w[1, 0] / w[0, 0]
yvalue = slope * xlinemark
plt.plot(xlinemark, yvalue, linestyle = 'dotted', color = "black", label = r"$Projection$")
##### Plot projected points
plt.scatter(X0_rec[:, 0], X0_rec[:, 1], marker = "o", color = "black", facecolors='none')
plt.scatter(X1_rec[:, 0], X1_rec[:, 1], marker = "s", color = "black", facecolors='none')
plt.legend(framealpha = 0.5)
##### Plot perpendicular lines
Z = X@w
X_rec = Z@w.T
for i in range(X.shape[0]):
    x_values = [X_rec[i, 0], X[i, 0]]
    y_values = [X_rec[i, 1], X[i, 1]]
    plt.plot(x_values, y_values, linestyle = 'dotted', color = "black")
plt.show()
